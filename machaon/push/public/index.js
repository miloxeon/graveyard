const urlBase64ToUint8Array = base64String => {
	var padding = '='.repeat((4 - (base64String.length % 4)) % 4)
	var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/')

	var rawData = window.atob(base64)
	var outputArray = new Uint8Array(rawData.length)

	for (var i = 0; i < rawData.length; ++i) {
		outputArray[i] = rawData.charCodeAt(i)
	}
	return outputArray
}

const subscribe = async () => {
	const registration = await navigator.serviceWorker.ready
	const response = await fetch('/api/vapidPublicKey')
	const vapidPublicKey = await response.text()
	// Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
	// urlBase64ToUint8Array() is defined in /tools.js
	const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey)

	const subscription = await registration.pushManager.subscribe({
		userVisibleOnly: true,
		applicationServerKey: convertedVapidKey,
	})

	await fetch('/api/register', {
		method: 'post',
		headers: { 'Content-type': 'application/json' },
		body: JSON.stringify({ subscription }),
	})

	return subscription
}

const queryExistingSubscription = async () => {
	const registration = await navigator.serviceWorker.ready
	const subscription = await registration.pushManager.getSubscription()

	await fetch('/api/register', {
		method: 'post',
		headers: { 'Content-type': 'application/json' },
		body: JSON.stringify({ subscription }),
	})

	return subscription
}

const enableSendButton = subscription => {
	const send = document.getElementById('doIt')
	send.removeAttribute('disabled')
	send.addEventListener('click', async () => {
		const delay = document.getElementById('notification-delay').value
		const ttl = document.getElementById('notification-ttl').value

		// Ask the server to send the client a notification (for testing purposes, in actual
		// applications the push notification is likely going to be generated by some event
		// in the server).
		await fetch('/api/sendNotification', {
			method: 'post',
			headers: { 'Content-type': 'application/json' },
			body: JSON.stringify({ subscription, delay, ttl }),
		})
	})
}

const runtime = async () => {
	await navigator.serviceWorker.register('service-worker.js')

	const askForPermission = document.getElementById('ask-for-permission')
	const enableNotifications = document.getElementById('enable-notifications')
	const send = document.getElementById('doIt')

	send.setAttribute('disabled', 'disabled')

	askForPermission.addEventListener('click', async () => {
		const subscription = await subscribe()
		enableSendButton(subscription)
	})

	enableNotifications.addEventListener('click', async () => {
		const subscription = await queryExistingSubscription()
		enableSendButton(subscription)
	})
}

runtime()
